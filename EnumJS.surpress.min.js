/*github.com/ChuckTerry/EnumJS,AGPL-3.0*/
class Enum{#a;#b;#c;#d;static from(){return new Enum(Array.from(arguments))};static isEnum(a){return a instanceof Enum};constructor(a){let b=a;if(!a){b=[true]};if(!Array.isArray(b)){let c=[true];try{c=Array.from(b)}catch(e){c=[true]}finally{b=c}};this.#a=b[0];this.#b=false;this.#c=null;this.#d=b};[Symbol.iterator](){let a=0;return {next:()=>{return (a<this.#d.length)?{value:this.#d[a++],done:false}:{done:true}}}};[Symbol.search](a){return this.indexOf(a)};[Symbol.toPrimitive](a){return (a===`number`)?this.#d.indexOf(this.#a):this.#a.toString()};[Symbol.toStringTag](){return `Enum`};get length(){return this.#d.length};get state(){return this.getState()};set state(a){return this.setState(a)};get states(){return this.getValidStates()};get value(){return this.getState()};set value(a){return this.setState(a)};forEach(){return Array.prototype.forEach.apply(this.#d,arguments)};getState(){return this.#a};getValidStates(){return this.#d};indexOf(a){return this.#d.indexOf(a)};isLocked(){return !!this.#b};isValidState(a){return this.indexOf(a)>-1};lock(a){if(this.isLocked()===true){return false};this.#b=true;this.#c=Symbol(`A`);return (a===true)?true:this.#c};setState(a){return ((!this.isValidState(a))||this.isLocked())?this.#a:(this.#a=a)};unlock(a){if(this.isLocked()===false||a!==this.#c){return false};this.#b=false;this.#c=null;return true};valueOf(){return this.getState()}};
